const marked = require('marked-man')
const { join } = require('path')
const NPM = require('./npm.js')
const transformHTML = require('./transform-html.js')

const TAGS = {
  CONFIG: '<!-- AUTOGENERATED CONFIG DESCRIPTIONS -->',
  USAGE: '<!-- AUTOGENERATED USAGE DESCRIPTIONS -->',
  SHORTHANDS: '<!-- AUTOGENERATED CONFIG SHORTHANDS -->',
}

const assertPlaceholder = (src, path, placeholder) => {
  if (!src.includes(placeholder)) {
    throw new Error(
      `Cannot replace ${placeholder} in ${path} due to missing placeholder`
    )
  }
  return placeholder
}

const replaceVersion = (src) => src.replace(/@VERSION@/g, NPM.version)

const removePlaceholders = (src) => src.replace(/^<!--.*-->$/gm, '')

const replaceUsage = (src, { path, docExt }) => {
  const replacer = assertPlaceholder(src, path, TAGS.USAGE)
  const { usage, name } = NPM.getCommandByDoc(path, docExt)

  const synopsis = ['```bash', usage]

  const cmdAliases = Object.keys(NPM.aliases).reduce((p, c) => {
    if (NPM.aliases[c] === name) {
      p.push(c)
    }
    return p
  }, [])

  if (cmdAliases.length === 1) {
    synopsis.push('')
    synopsis.push(`alias: ${cmdAliases[0]}`)
  } else if (cmdAliases.length > 1) {
    synopsis.push('')
    synopsis.push(`aliases: ${cmdAliases.join(', ')}`)
  }

  synopsis.push('```')

  return src.replace(replacer, synopsis.join('\n'))
}

const replaceParams = (src, { path, docExt }) => {
  const { params } = NPM.getCommandByDoc(path, docExt)
  const replacer = params && assertPlaceholder(src, path, TAGS.CONFIG)

  if (!params) {
    return src
  }

  return src.replace(replacer, NPM.describeParams(params).join('\n\n'))
}

const replaceConfig = (src, { path }) => {
  const replacer = assertPlaceholder(src, path, TAGS.CONFIG)
  return src.replace(replacer, NPM.describeAll())
}

const replaceShorthands = (src, { path }) => {
  const replacer = assertPlaceholder(src, path, TAGS.SHORTHANDS)

  const shorthands = Object.entries(NPM.shorthands)
    .sort(([shorta, expansiona], [shortb, expansionb]) => {
      // sort by what they're short FOR
      return expansiona.join(' ').localeCompare(expansionb.join(' '), 'en') ||
      shorta.localeCompare(shortb, 'en')
    })
    .map(([short, expansion]) => {
      const dash = short.length === 1 ? '-' : '--'
      return `* \`${dash}${short}\`: \`${expansion.join(' ')}\``
    })

  return src.replace(replacer, shorthands.join('\n'))
}

const replaceHelpLinks = (src) => {
  const replacer = (_, p1) => 'npm help ' + p1.replace(/npm /, '')
  return src
    .replace(/\[([^\]]+)\]\(\/commands\/([^)]+)\)/g, replacer)
    .replace(/\[([^\]]+)\]\(\/configuring-npm\/([^)]+)\)/g, replacer)
    .replace(/\[([^\]]+)\]\(\/using-npm\/([^)]+)\)/g, replacer)
}

const transformMan = (src, { data }) =>
  marked(`# ${data.title}(${data.section}) - ${data.description}\n\n${src}`)

const manPath = (name, { data }) => join(`man${data.section}`, `${name}.${data.section}`)

const transformMd = (src, { frontmatter }) => ['---', frontmatter, '---', '', src].join('\n')

module.exports = {
  usage: replaceUsage,
  params: replaceParams,
  config: replaceConfig,
  version: replaceVersion,
  shorthands: replaceShorthands,
  helpLinks: replaceHelpLinks,
  placeholders: removePlaceholders,
  man: transformMan,
  manPath: manPath,
  md: transformMd,
  html: transformHTML,
}
